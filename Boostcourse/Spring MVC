MVC(Model-View-Controller) : 
                             Model - 뷰가 렌더링 하는데 필요한 데이터, 예를들어 상품목록, 주문내역
                             View - 웹 애플리케이션에서 뷰는 실제로 보이는 부분이며 모델을 사용해 렌더링한다.
                                    JSP, JSF, PDF, XML등으로 결과 표현
                             Controller - 사용자의 액션에 응답하는 컴포넌트, 컨트롤러는 모델을 업데이트하고 
                                          다른 액션을 수행
             
             
MVC Model 1 - 사용자의 요청을 JSP가 전부 처리, 웹브라우저 사용자의 요청을 받은 JSP는 자바빈즈나 서비스 클래스를
              사용하여 웹 브라우저가 요청한 작업을 처리하고 결과를 출력
              
              
MVC Model 2 - 웹브라우저 사용자의 요청을 서블릿이 받음 
              서블릿은 웹브라우저의 요청을 받아 View로 보낼지 Model로 보낼지 정하여 전송
              여기서 View는 사용자에게 보여주는 역할만 담당 실질적인 기능은 Model에서 담당한다.
              실질적으로 보여지는 HTML과 JAVA소스를 분리해 놓아 개발을 확장, 유지보수하기 쉽다.
              
              
              
Spring MVC - 모델 2 아키텍처로 구성

             Dispatcher Servlet - Http 프로토콜을 통해 들어오는 모든 요청을 프레젠테이션 계층의 제일 앞에 둬서 
                                  중앙 집중식으로 처리해주는 프로트 컨트롤러
                                  web.xml의 역할을 상당히 축소시켜주었음, 즉 dispatcher-sevlet이 해당 어플리케이션으로 
                                  들어오는 모든 요청을 핸들링해주고 공통작업을 처리한다.
                                  
                                  <dispatcher servlet 내부동작흐름>
                                  1. 요청
                                  2. 요청 선처리 작업
                                                    <요청 선처리 작업 흐름>
                                                    2-1. 요청
                                                    2-2. Local결정
                                                    2-3. RequestContextHolder에 요청 저장
                                                    2-4. FlashMap 복원
                                                    2-5. 멀티파트요청 o ->MultipartResolver가 멀티파트 결정
                                                         멀티파트요청 x ->핸들러 결정과 실행
                                                    
                                  3. HandlerExecutionChain 결정
                                  4. HandlerExecutionChain 실행
                                  5. 예외0 -> 예외처리
                                     예외x -> 뷰렌더링 -> 요청처리종료 
                                                                 
                                                                   
                                  
             
             Handler Mapping - dispatcher servlet으로 들어온 모든 요청을 각각의 controller로 위임처리를 하는 
                               handler mapping
             Handler Adaper
             ViewResolver

                
