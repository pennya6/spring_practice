spring Framework : 엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션,
                   원하는 부분만 가져다 사용할 수 있는 모듈화,
                   IoC컨테이너,
                   선언적으로 트랜잭션을 관리 할 수 있다.
                   완전한 기능을 갖춘 MVC Framgework제공,
                   AOP지원, POJO
                   자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크이다.
                   자바 객체를 담고 직접 관리한다.
                   
                  +Container : 인스턴스의 생명주기 관리, 생성된 인스턴스에게 추가적인 기능 제공
                               인스턴스를 직접 생성하고 없애주는 것이다.
                                ex) WAS, JSP
                   
                   +엔터프라이즈급 개발 : 기업을 대상으로 하는 개발, 즉 대규모 데이터 처리와 트랜잭션이 동시에
                                          여러 사용자로부터 이루어지는 큰 규모의 환경
                                          
                   +IoC(Inversion of Control) : 제어의 역전
                                                즉 제어의 흐름을 사용자가 컨트롤 하지 않고 위임한 특별한 객체에게 
                                                모든것을 맡김
                                                기존 사용자가 모든 작업을 제어하던 것을 특별한 객체에 위임하여 
                                                모든 객체에 대한 제어권이 넘어간것 
                                            
                   +POJO(Plain Old Java Object) : 평범한 자바 오브젝트, getter/setter를 가진 단순 자바 오브젝트로 정의
                   
                   +AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍
                   
                   +DI(Dependency Injection) : 의존성 주입, 클래스 사이의 의존 관계를 빈 설정 정보를 바탕으로 컨테이너가 
                                               자동으로 연결해주는 것
                                               
                                               DI의 세 가지 적용 유형
                                               1) 생성자를 이용한 의존성 삽입
                                               2) setter()메소드를 이용한 의존성 삽입
                                               3) 초기화 인터페이스를 이용한 의존성 삽입
                   
                   
프레임 워크 모듈 : 스프링 프레임워크는 약 20개의 모듈로 구성되어있으며 필요한 모듈만 가져다 사용할 수 있다.

Spring에서 제공하는 IoC/DI 컨테이너 
1. BeanFactory : IoC/DI에 대한 기본 기능을 갖고 있다. 스프링 빈 컨테이너에 접근하기 위한 최상위 인터페이스
2. ApplicationContext : BeanFactory의 모든 기능을 포함한다. 즉 하위인터페이스이다. 
3. BeanPostProcessor :  컨테이너의 기본로직을 오버라이딩한다. 인스턴스화 와 의존성 처리 로직 등을 개발자가
                        원하는 대로 구현할 수 있게 한다.
                       
Bean : Spring 컨테이너가 관리하는 객체

Spring은 빈을 생성할때 기본적으로 싱글톤(Singleton)객체로 생성한다. 이는 메모리에 하나만 생성한다는 의미이다.
만약 여러개를 사용하고 싶다면 
<bean id="e" class="kr.or.connect.diexam01.Engine"></bean>
	<bean id="c" class="kr.or.connect.diexam01.Car">
		<property name="engine" ref="e"></property>
	</bean>
  이런식으로 한다. 즉 bean의 scope를 prototype으로 변경한다.
  
  
class UserBean의 특징
	  1) 기본 생성자를 가지고 있다.
	  2) 필드는 private하게 선언한다.
	  3) getter, setter 메소드를 가진다. getName() setName() 메소드를 프로피티(property)라고 한다.
	
